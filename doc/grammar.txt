{**
 * Written in EBNF
 * Date: 2015/11/07
 *}
 
keywords =
    "body" "byte" "def" "dword" "end" "entry" "get" "put" "var" "void" "word" ;

program =
    entry_point_specifier
    [var_block]
    {func_definition}
    EOF ;
    
entry_point_specifier =
    "entry" id ;
    
var_block =
    "var"
        var_definition_list
    "end" ;

var_definition_list =
    var_definition {var_definition} ;

var_definition =
    var_declaration var_declarator ;

var_declaration =
    var_type_spec ;
    
var_type_spec =
    nonempty_type ;
    
var_declarator =
    var_actual_declarator var_size_declarator [":" var_initializer_list] ;
    
var_actual_declarator =
    id ;
    
var_size_declarator =
    '[' [const] ']' ;
    
var_initializer_list =
    var_initializer {"," var_initializer} ;
    
var_initializer =
    const | const "::" const" ;
    
func_definition =
    "def" func_declaration func_declarator ":"
        [var_block]
        stmts
    "end" ;
    
func_declaration =
    func_type_spec ;
    
func_type_spec =
    empty_type | nonemptytype ;
    
func_declarator =
    func_actual_declarator ;
    
func_actual_declarator =
    id '(' parameter_list ')' ;
    
func_parameter_list =
    func_parameter_declaration {func_parameter_declaration} ;
    
func_parameter_declaration =
    var_declaration var_actual_declarator ;
    
func_body_block =
    "body"
        stmt_list
    "end" ;
    
nonempty_type =
    "byte" | "word" | "dword" ;

empty_type =
    "void" ;
    
stmt_list =
    stmt {stmt} ;
    
stmt =
    expr_stmt | break_stmt | continue_stmt | next_stmt | return_stmt |
    if_stmt | while_stmt | for_stmt ;

expr_stmt =
    expr ;
    
break_stmt =
    "break" ;
    
continue_stmt =
    "continue" ;
    
next_stmt =
    "next" ;
    
return_stmt =
    "ret" [expr];
    
if_stmt =
    "if" "(" expr ")" ":" stmts
    {"elseif" "(" expr ")" ":" stmts}
    ["else" ":" stmts]
    "end" ;
    
while_stmt =
    "while" "(" expr ")" ":" stmts ;
    
for_stmt =
    "for" "(" expr  ")" "(" expr  ")" "(" expr  ")" ":"
        stmts
    "end" ;

expr =
    expr "+" term |
    expr "-" term |
    term ;
    
term =
    term "*" factor |
    term "/" factor |
    factor ;
    
factor =
    const | "(" expr ")" ;
    
const =
    int | sqstr| dqstr ;



{* Tokens *}
    
name =
    id ;
    
int =

sqstring =

dqstring =
    
    
{* Atoms *}

id =
    ( "_" | letter ) {"_" | digit | letter} ;
    
letter =

digit =
